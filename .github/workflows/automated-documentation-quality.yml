name: üìö Automated Documentation & Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_pr:
        description: 'Force create PR even with no changes'
        required: false
        default: false
        type: boolean

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  code-quality-checks:
    name: üîç Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      has-violations: ${{ steps.check-results.outputs.has-violations }}
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install Node.js dependencies
      run: npm install

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Run ktlint check
      run: ./gradlew ktlintCheck
      continue-on-error: true

    - name: Run Detekt analysis
      run: ./gradlew detekt
      continue-on-error: true

    - name: Run Android Lint
      run: ./gradlew lintDebug
      continue-on-error: true

    - name: Run Unit Tests with Coverage
      run: ./gradlew testDebugUnitTest jacocoTestReport
      continue-on-error: true

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/
          app/build/test-results/

    - name: Check for violations
      id: check-results
      run: |
        VIOLATIONS=false
        
        # Check ktlint results
        if [ -f "app/build/reports/ktlint/ktlintMainSourceSetCheck/ktlintMainSourceSetCheck.xml" ]; then
          if grep -q "error" app/build/reports/ktlint/ktlintMainSourceSetCheck/ktlintMainSourceSetCheck.xml; then
            echo "ktlint violations found"
            VIOLATIONS=true
          fi
        fi
        
        # Check detekt results
        if [ -f "app/build/reports/detekt/detekt.xml" ]; then
          if grep -q "<error" app/build/reports/detekt/detekt.xml; then
            echo "detekt violations found"
            VIOLATIONS=true
          fi
        fi
        
        # Check lint results
        if [ -f "app/build/reports/lint-results-debug.xml" ]; then
          if grep -q 'severity="Error"' app/build/reports/lint-results-debug.xml; then
            echo "lint errors found"
            VIOLATIONS=true
          fi
        fi
        
        echo "has-violations=$VIOLATIONS" >> $GITHUB_OUTPUT

    - name: Calculate test coverage
      id: coverage
      run: |
        if [ -f "app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
          # Extract coverage percentage from JaCoCo XML report
          COVERAGE=$(grep -o 'covered="[0-9]*"' app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | head -1 | grep -o '[0-9]*')
          TOTAL=$(grep -o 'missed="[0-9]*"' app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml | head -1 | grep -o '[0-9]*')
          
          if [ -n "$COVERAGE" ] && [ -n "$TOTAL" ]; then
            PERCENTAGE=$(echo "scale=2; $COVERAGE * 100 / ($COVERAGE + $TOTAL)" | bc -l)
            echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "percentage=0" >> $GITHUB_OUTPUT
        fi

    - name: Comment Test Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.percentage }}';
          const body = `## üìä Test Coverage Report
          
          Current test coverage: **${coverage}%**
          
          ${coverage >= 80 ? '‚úÖ' : coverage >= 60 ? '‚ö†Ô∏è' : '‚ùå'} Coverage is ${coverage >= 80 ? 'excellent' : coverage >= 60 ? 'acceptable' : 'low'}
          
          *Generated by automated documentation & code quality workflow*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  architecture-validation:
    name: üèóÔ∏è Architecture Validation
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: code-quality-checks
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Validate Clean Architecture
      run: node scripts/validate-architecture.js

    - name: Archive architecture report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: architecture-report
        path: architecture-report.json

  documentation-generation:
    name: üìñ Documentation Generation
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [code-quality-checks, architecture-validation]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install Node.js dependencies
      run: npm install

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Generate API Documentation with Dokka
      run: ./gradlew dokkaHtml
      continue-on-error: true

    - name: Update README Statistics  
      run: node scripts/update-readme-stats.js

    - name: Generate Dependency Documentation
      run: |
        echo "# Project Dependencies" > docs/DEPENDENCIES.md
        echo "" >> docs/DEPENDENCIES.md
        echo "Generated on: $(date)" >> docs/DEPENDENCIES.md
        echo "" >> docs/DEPENDENCIES.md
        
        echo "## Build Dependencies" >> docs/DEPENDENCIES.md
        ./gradlew dependencies --configuration debugRuntimeClasspath > temp_deps.txt 2>/dev/null || true
        if [ -s temp_deps.txt ]; then
          echo '```' >> docs/DEPENDENCIES.md
          cat temp_deps.txt >> docs/DEPENDENCIES.md  
          echo '```' >> docs/DEPENDENCIES.md
        fi
        rm -f temp_deps.txt
        
        echo "" >> docs/DEPENDENCIES.md
        echo "## Node.js Dependencies" >> docs/DEPENDENCIES.md
        echo '```json' >> docs/DEPENDENCIES.md
        cat package.json | jq '.dependencies // {}, .devDependencies // {}' >> docs/DEPENDENCIES.md
        echo '```' >> docs/DEPENDENCIES.md

    - name: Generate Code Metrics Report
      run: |
        echo "# Code Metrics Report" > docs/CODE_METRICS.md
        echo "" >> docs/CODE_METRICS.md
        echo "Generated on: $(date)" >> docs/CODE_METRICS.md
        echo "" >> docs/CODE_METRICS.md
        
        # Count files
        KOTLIN_FILES=$(find app/src/main/kotlin -name "*.kt" | wc -l)
        TEST_FILES=$(find app/src/test/kotlin -name "*.kt" | wc -l)
        
        echo "## File Statistics" >> docs/CODE_METRICS.md
        echo "- Kotlin source files: $KOTLIN_FILES" >> docs/CODE_METRICS.md
        echo "- Test files: $TEST_FILES" >> docs/CODE_METRICS.md
        echo "" >> docs/CODE_METRICS.md
        
        # Lines of code (simple count)
        if [ -d "app/src/main/kotlin" ]; then
          LOC=$(find app/src/main/kotlin -name "*.kt" -exec wc -l {} + | tail -1 | awk '{print $1}')
          echo "- Total lines of code: $LOC" >> docs/CODE_METRICS.md
        fi

    - name: Check for changes
      id: check-changes
      run: |
        if git diff --quiet; then
          echo "has-changes=false" >> $GITHUB_OUTPUT
        else
          echo "has-changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Archive generated documentation
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation
        path: |
          docs/
          app/build/docs/

  code-formatting:
    name: üé® Code Formatting
    runs-on: ubuntu-latest
    needs: code-quality-checks
    if: needs.code-quality-checks.outputs.has-violations == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          .gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Apply ktlint formatting
      run: ./gradlew ktlintFormat
      continue-on-error: true

    - name: Apply Detekt auto-corrections
      run: ./gradlew detekt --auto-correct
      continue-on-error: true

    - name: Check for formatting changes
      id: check-formatting
      run: |
        if git diff --quiet; then
          echo "has-changes=false" >> $GITHUB_OUTPUT
        else
          echo "has-changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit formatting changes
      if: steps.check-formatting.outputs.has-changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "üé® Apply automated code formatting

        - ktlint formatting applied
        - Detekt auto-corrections applied
        - Generated by automated documentation & code quality workflow"

    - name: Push formatting changes
      if: steps.check-formatting.outputs.has-changes == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

  create-improvement-pr:
    name: üöÄ Create Improvement PR
    runs-on: ubuntu-latest
    needs: [code-quality-checks, architecture-validation, documentation-generation]
    if: |
      always() && 
      (github.event_name == 'schedule' || 
       github.event.inputs.force_pr == 'true' ||
       needs.documentation-generation.outputs.has-changes == 'true')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Create improvement branch
      run: |
        BRANCH_NAME="automated-improvements-$(date +%Y%m%d-%H%M%S)"
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        git checkout -b $BRANCH_NAME

    - name: Run all improvement scripts
      run: |
        # Update documentation
        npm install
        node scripts/update-readme-stats.js
        
        # Generate reports
        echo "# Automated Quality Report" > QUALITY_REPORT.md
        echo "" >> QUALITY_REPORT.md
        echo "Generated on: $(date)" >> QUALITY_REPORT.md
        echo "" >> QUALITY_REPORT.md
        echo "## Summary" >> QUALITY_REPORT.md
        echo "- Test Coverage: ${{ needs.code-quality-checks.outputs.coverage-percentage }}%" >> QUALITY_REPORT.md
        echo "- Code Quality Violations: ${{ needs.code-quality-checks.outputs.has-violations }}" >> QUALITY_REPORT.md
        echo "" >> QUALITY_REPORT.md

    - name: Commit improvements
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add .
        git commit -m "üìö Automated documentation and code quality improvements

        ## Changes Made:
        - Updated README.md with current project statistics  
        - Generated/updated API documentation
        - Created dependency documentation
        - Generated code metrics report
        - Applied automated code quality improvements

        ## Quality Metrics:
        - Test Coverage: ${{ needs.code-quality-checks.outputs.coverage-percentage }}%
        - Architecture Validation: Passed
        - Code Quality Violations: ${{ needs.code-quality-checks.outputs.has-violations }}

        Generated by automated documentation & code quality workflow
        Timestamp: $(date)"

    - name: Push improvement branch
      run: git push origin $BRANCH_NAME

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ needs.code-quality-checks.outputs.coverage-percentage }}';
          const hasViolations = '${{ needs.code-quality-checks.outputs.has-violations }}';
          
          const body = `## ü§ñ Automated Documentation & Code Quality Improvements

          This PR contains automated improvements to documentation and code quality.

          ### üìä Quality Metrics
          - **Test Coverage**: ${coverage}%
          - **Code Quality Violations**: ${hasViolations === 'true' ? '‚ö†Ô∏è Found (see reports)' : '‚úÖ None'}
          - **Architecture Validation**: ‚úÖ Passed

          ### üìö Documentation Updates
          - ‚úÖ Updated README.md with current project statistics
          - ‚úÖ Generated API documentation with Dokka
          - ‚úÖ Updated dependency documentation
          - ‚úÖ Generated code metrics report

          ### üéØ Automated Actions Performed
          - ‚úÖ ktlint code formatting checks
          - ‚úÖ Detekt static code analysis  
          - ‚úÖ Android Lint validation
          - ‚úÖ Clean Architecture validation
          - ‚úÖ Test coverage analysis
          - ‚úÖ Documentation generation

          ### üîó Reports
          Check the workflow run for detailed reports and artifacts.

          ---
          *This PR was automatically created by the Automated Documentation & Code Quality workflow.*
          *Review the changes and merge if everything looks good.*`;

          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üìö Automated Documentation & Code Quality Improvements (${new Date().toISOString().split('T')[0]})`,
            head: process.env.BRANCH_NAME,
            base: 'main',
            body: body,
            draft: false
          });

          console.log(`Created PR #${pr.number}: ${pr.html_url}`);

  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [code-quality-checks, architecture-validation, documentation-generation, code-formatting, create-improvement-pr]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## üìã Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture Validation**: ${{ needs.architecture-validation.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Documentation**: ${{ needs.documentation-generation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Formatting**: ${{ needs.code-formatting.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Improvement PR**: ${{ needs.create-improvement-pr.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Test Coverage: ${{ needs.code-quality-checks.outputs.coverage-percentage }}%" >> $GITHUB_STEP_SUMMARY
        echo "- Violations Found: ${{ needs.code-quality-checks.outputs.has-violations }}" >> $GITHUB_STEP_SUMMARY