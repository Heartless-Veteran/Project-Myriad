name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Lint and code quality checks
  lint:
    name: üîç Code Quality
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Kotlin linting (ktlint)
        run: ./gradlew ktlintCheck
        continue-on-error: true

      - name: Run Detekt
        run: ./gradlew detekt
        continue-on-error: true

  # Unit tests
  test:
    name: üß™ Unit Tests
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Create local.properties
        run: |
          echo "geminiApiKey=test_key_for_ci" > local.properties

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest
        continue-on-error: true

      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            app/build/reports/tests/
            app/build/reports/jacoco/
          retention-days: 30

  # Android build
  build:
    name: üèóÔ∏è Android Build
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        build-type: [debug, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Create local.properties
        run: |
          echo "geminiApiKey=test_key_for_ci" > local.properties

      - name: Build ${{ matrix.build-type }} APK
        run: ./gradlew assemble${{ matrix.build-type == 'debug' && 'Debug' || 'Release' }}
        continue-on-error: true

      - name: Upload APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: apk-${{ matrix.build-type }}
          path: app/build/outputs/apk/${{ matrix.build-type }}/*.apk
          retention-days: 30

  # Security scanning
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency analysis
  dependency-check:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run dependency vulnerability check
        run: ./gradlew dependencyCheckAnalyze
        continue-on-error: true

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results
          path: app/build/reports/dependency-check-report.html
          retention-days: 30

  # Documentation check
  docs-check:
    name: üìñ Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken links in markdown
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

      - name: Validate README structure
        run: |
          # Check if required sections exist in README
          echo "Checking README.md structure..."
          
          required_sections=("Features" "Technology Stack" "Architecture" "Getting Started" "Contributing")
          
          for section in "${required_sections[@]}"; do
            if grep -q "# .*$section\|## .*$section" README.md; then
              echo "‚úÖ Found section: $section"
            else
              echo "‚ùå Missing section: $section"
            fi
          done

  # GitHub Pages deployment
  deploy-pages:
    name: üöÄ Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, docs-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Release automation
  release:
    name: üéâ Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build, security, dependency-check]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD~10..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get version from commit
        id: version
        run: |
          # Extract version from commit message or use date
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP '\[release\] v\K[0-9]+\.[0-9]+\.[0-9]+' || echo "v$(date +'%Y.%m.%d')")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          name: apk-release
          path: ./apks/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Project Myriad ${{ steps.version.outputs.VERSION }}
          body: |
            ## üöÄ What's New in ${{ steps.version.outputs.VERSION }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## üì± Installation
            
            Download the APK file below and install it on your Android device (API 24+).
            
            ## üõ°Ô∏è Security
            
            All releases are automatically scanned for vulnerabilities and built using our secure CI/CD pipeline.
            
            ## üìã Changelog
            
            For detailed changes, see the [commit history](https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.VERSION }}...main).
          draft: false
          prerelease: false

  # Notification
  notify:
    name: üì¢ Notify Status
    runs-on: ubuntu-latest
    permissions: {}
    needs: [lint, test, build, security, dependency-check, docs-check]
    if: always()
    steps:
      - name: Check workflow status
        run: |
          echo "Workflow completed with the following results:"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Documentation Check: ${{ needs.docs-check.result }}"
          
          if [ "${{ needs.lint.result }}" == "success" ] && 
             [ "${{ needs.test.result }}" == "success" ] && 
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "üéâ All critical checks passed!"
          else
            echo "‚ö†Ô∏è Some checks failed or were skipped"
          fi