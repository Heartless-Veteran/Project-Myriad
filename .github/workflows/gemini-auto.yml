name: Gemini Auto - AI Code Fixer

# This workflow automatically fixes code issues using Google's Gemini AI
# and commits the fixes directly to pull requests
on:
  pull_request:
    types: [opened, synchronize, labeled]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  pre_check:
    name: Pre-check for Issues
    runs-on: ubuntu-latest
    outputs:
      has_issues: ${{ steps.check.outputs.has_issues }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Check for issues requiring fixes
        id: check
        run: |
          # Run quick pre-check to see if there are issues to fix
          if GEMINI_TEST_MODE=true node ./scripts/gemini-auto.js | grep -q "Issues detected"; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "✅ Issues detected - Gemini Auto will run"
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT  
            echo "ℹ️ No issues detected - Gemini Auto will be skipped"
          fi

  gemini_auto_fix:
    name: Gemini Auto Fix
    needs: pre_check
    # Only run if there are actual issues to fix AND conditions are met
    if: |
      needs.pre_check.outputs.has_issues == 'true' && (
        github.event.action == 'opened' ||
        github.event.action == 'synchronize' ||
        (github.event.action == 'labeled' && github.event.label.name == 'gemini-auto') ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Validate configuration
        run: |
          echo "🔧 Validating Gemini Auto configuration..."
          
          # Check if custom configuration exists
          if [ -f ".gemini-rules.json" ]; then
            echo "✅ Custom configuration found: .gemini-rules.json"
            node -e "
              const fs = require('fs');
              try {
                const config = JSON.parse(fs.readFileSync('.gemini-rules.json', 'utf8'));
                console.log('📋 Enabled languages:', Object.keys(config).filter(k => typeof config[k] === 'object' && config[k].enabled));
                console.log('🎯 Fix categories:', Object.keys(config.fixCategories || {}).filter(k => config.fixCategories[k]));
                console.log('🧠 AI Model:', config.modelSelection?.defaultModel || 'gemini-1.5-flash');
              } catch (e) {
                console.error('❌ Invalid configuration:', e.message);
                process.exit(1);
              }
            "
          else
            echo "ℹ️ Using default configuration"
          fi

      - name: Run Gemini Auto Analysis and Fix
        id: gemini_auto
        run: |
          # Security check: Verify API key is configured
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "⚠️ GEMINI_API_KEY secret is not configured"
            echo "status=missing_key" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Run the enhanced Gemini Auto script
          echo "🚀 Starting Gemini Auto with enhanced features..."
          
          if timeout 10m node ./scripts/gemini-auto.js 2>&1 | tee gemini-auto-output.log; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "changes_made=true" >> $GITHUB_OUTPUT
            
            # Extract statistics from output for PR comment
            if grep -q "GEMINI AUTO FIX REPORT" gemini-auto-output.log; then
              echo "has_detailed_report=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=error" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}

      - name: Commit and push fixes
        if: steps.gemini_auto.outputs.changes_made == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Gemini Auto"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🤖 Gemini Auto: Apply AI-suggested fixes

            Auto-generated fixes by Gemini AI to improve code quality,
            performance, and adherence to best practices.
            
            - Fix linting issues
            - Optimize performance
            - Apply security improvements  
            - Standardize code formatting"
            git push
            echo "✅ Gemini Auto fixes committed and pushed successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Post enhanced status comment
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.gemini_auto.outputs.status }}';
            const changesMade = '${{ steps.gemini_auto.outputs.changes_made }}';
            const hasDetailedReport = '${{ steps.gemini_auto.outputs.has_detailed_report }}';
            
            let body = "## 🤖 Gemini Auto - Enhanced AI Code Fixer\n\n";
            
            if (status === 'missing_key') {
              body += "🔧 **Setup Required**: Configure your Gemini API key for auto-fixes.\n\n";
              body += "### Quick Setup:\n";
              body += "1. Get a free API key at [Google AI Studio](https://makersuite.google.com/app/apikey)\n";
              body += "2. Add it as `GEMINI_API_KEY` in **Settings > Secrets and variables > Actions**\n";
              body += "3. Add label `gemini-auto` to this PR or push new commits to trigger fixes\n\n";
              body += "🚀 **Enhanced Features**:\n";
              body += "- 🔧 **Language-specific analysis** for Kotlin, JavaScript, TypeScript, and Shell\n";
              body += "- 🧠 **Smart model selection** (uses Gemini 1.5 Pro for complex tasks)\n";
              body += "- 📊 **Categorized fixes** (Security, Performance, Style)\n";
              body += "- ⚙️ **Configurable rules** via `.gemini-rules.json`\n";
              body += "- 📈 **Rich reporting** with detailed statistics\n";
            } else if (status === 'success' && changesMade === 'true') {
              body += "✅ **Auto-fixes applied successfully!**\n\n";
              
              if (hasDetailedReport === 'true') {
                body += "📊 **Enhanced Analysis Results**:\n";
                body += "- Applied language-specific Kotlin optimizations\n";
                body += "- Fixed security vulnerabilities and null-safety issues\n";
                body += "- Optimized performance bottlenecks\n";
                body += "- Standardized code style and formatting\n\n";
              } else {
                body += "🔧 **Changes made**:\n";
                body += "- Linting issues resolved\n";
                body += "- Performance optimizations applied\n";
                body += "- Code formatting standardized\n";
                body += "- Security improvements implemented\n\n";
              }
              
              body += "🎯 **New in this version**:\n";
              body += "- 🔍 Enhanced Kotlin analysis (null-safety, coroutines, data classes)\n";
              body += "- 🧠 Intelligent model selection based on task complexity\n";
              body += "- 📈 Categorized issue reporting\n";
              body += "- ⚙️ Custom configuration support\n\n";
              body += "📝 **Review the commit** above to see all changes made by Gemini Auto.";
            } else if (status === 'success') {
              body += "✅ **Analysis complete - No fixes needed!**\n\n";
              body += "🎉 Your code is already following best practices.\n\n";
              body += "📋 **Enhanced Analysis Coverage**:\n";
              body += "- ✅ Kotlin code quality and safety\n";
              body += "- ✅ JavaScript/TypeScript modern practices\n";
              body += "- ✅ Security vulnerability scanning\n";
              body += "- ✅ Performance optimization checks\n";
            } else {
              body += "❌ **Error during auto-fix process**\n\n";
              body += "Please check the workflow logs for details.\n\n";
              body += "🔧 **Troubleshooting**:\n";
              body += "- Ensure `.gemini-rules.json` is valid JSON if present\n";
              body += "- Check that GEMINI_API_KEY is properly configured\n";
              body += "- Verify file permissions and accessibility\n";
            }
            
            body += "\n\n---\n*Gemini Auto Enhanced - Language-Specific AI Analysis*";
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  no_issues_comment:
    name: No Issues Comment
    needs: pre_check
    # Run this job when there are no issues to fix
    if: |
      needs.pre_check.outputs.has_issues == 'false' && (
        github.event.action == 'opened' ||
        github.event.action == 'synchronize' ||
        (github.event.action == 'labeled' && github.event.label.name == 'gemini-auto') ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ubuntu-latest
    
    steps:
      - name: Post enhanced no issues comment
        uses: actions/github-script@v7
        with:
          script: |
            const body = "## 🤖 Gemini Auto Enhanced\n\n" +
              "✅ **No issues detected!**\n\n" +
              "🎉 Your code already follows best practices across all supported languages.\n\n" +
              "📊 **Enhanced Analysis Coverage**:\n" +
              "- ✅ **Kotlin**: Null-safety, coroutines, data classes, Compose performance\n" +
              "- ✅ **JavaScript/TypeScript**: Modern syntax, unused imports, async patterns\n" +
              "- ✅ **Shell Scripts**: Best practices, security patterns\n" +
              "- ✅ **Security**: Vulnerability scanning and fixes\n" +
              "- ✅ **Performance**: Optimization opportunities\n" +
              "- ✅ **Style**: Code formatting and conventions\n\n" +
              "🧠 **AI Model**: Intelligent model selection based on code complexity\n" +
              "⚙️ **Configuration**: Supports custom rules via `.gemini-rules.json`\n\n" +
              "---\n*Gemini Auto Enhanced - Language-Specific AI Analysis*";
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });